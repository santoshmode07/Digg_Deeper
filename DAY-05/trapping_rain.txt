class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        // vector<int>sufmax(n);
        // sufmax[n-1]=height[n-1];
        // for(int i=n-2;i>=0;i--){
        //     sufmax[i]=max(sufmax[i+1],height[i]);
        // }
        // int premax=-1;
        // int ans=0;
        // for(int i=0;i<n;i++){
        //     premax=max(premax,height[i]);
        //     if(height[i]<premax&&height[i]<sufmax[i]){
        //         ans+=min(premax,sufmax[i])-height[i];
        //     }
        // }
        // return ans;
        int left=0,right=n-1;
        int leftmax=0,rightmax=0,total=0;
        while(left<=right){
            if(height[left]<=height[right]){
                if(leftmax>height[left]){
                    total+=leftmax-height[left];
                }
                else{
                    leftmax=height[left];
                }
                left=left+1;
            }
            else{
                if(rightmax>height[right]){
                    total+=rightmax-height[right];
                }
                else{
                    rightmax=height[right];
                }
                right=right-1;
            }
        }
        return total;
    }
};