/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        // if(root==nullptr) return 0;
        // queue<TreeNode*>que;
        // que.push(root);
        // vector<vector<int>>vec;
        // while(!que.empty()){
        //     int size=que.size();
        //     vector<int>nums;
        //     for(int i=0;i<size;i++){
        //         TreeNode*temp=que.front();
        //         if(temp->left!=nullptr)que.push(temp->left);
        //         if(temp->right!=nullptr)que.push(temp->right);
        //         que.pop();
        //         nums.push_back(temp->val);
                
        //     }
        //     vec.push_back(nums);
        // }
        // return vec.size();
        if(root==nullptr) return 0;
        int left=maxDepth(root->left);
        int right=maxDepth(root->right);
        return max(left,right)+1;
    }
};